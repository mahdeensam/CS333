/**
 * Program Description:
 * This program extends the capabilities of a lexical analyzer generated by Flex to include additional statistics on a given text input. 
 * It computes total words, total characters, average word length, the maximum and minimum word length, and identifies the most common word in the text.

 * Authors: Mahdeen Ahmed Khan Sameer
 * Professor: Maximillian Bender
 * Date: 02/30/2024
 */

/** Compile:
	flex extension4.yy
 	gcc -o extension4 lex.yy.c
Run:
    ./extension4 < sample_text.txt
    or
    echo "string" | ./extension4
*/


%{
#include <stdio.h>
#include <string.h>

#define MAX_WORD 100

int chars = 0; 
int words = 0;
int max_len = 0;
int min_len = 99999;
char most_common[MAX_WORD+1];
char counts[MAX_WORD];
int most_count = 0;

int hash(char *str) {
  int sum = 0;
  for(int i = 0; str[i]; i++) {
    sum += str[i];
  }
  return sum;
}

%}

%%

[a-zA-Z]+ {
  chars += strlen(yytext);
  words++;

  int len = strlen(yytext);
  if(len > max_len) max_len = len;
  if(len < min_len) min_len = len;
  int index = hash(yytext) % 100;
  if(++counts[index] > most_count) {
    most_count = counts[index];
    strcpy(most_common, yytext);
  }
}

\n {}
. {}

%%


int main() {
  
  // Initialize count array
  memset(counts, 0, sizeof(counts));

  yylex();

  double avg_len = (double)chars/words;

  printf("Words: %d\n", words);
  printf("Characters: %d\n", chars);
  printf("Average word length: %.2f\n", avg_len);
  printf("Max word length: %d\n", max_len);
  printf("Min word length: %d\n", min_len);
  printf("Most common word: %s\n", most_common);

  return 0;
}
int yywrap() {
  return 1;
}